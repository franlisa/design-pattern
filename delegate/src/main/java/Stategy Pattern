第一个模式
设计原则
1. 封装变化。
   将一个类中不变的，变化的区分开，变化的单独封装
2. 多用组合，少用继承。
   不仅只有继承方式可以达到复用功能。并且很多时候继承是有很多问题的。
   例如，1）改变会牵一发而动全身，造成其他继承子类不想要的改变。
   2）代码在多个子类中重复，例如说有个功能，但并不是所有子类都有，这时候如果说在父类中有个默认实现，不想要的子类可以覆盖等等，
   这样一方面子类有时候可能忘记这么做，就让子类拥有了本不该有的功能。如果说直接用接口，由子类各自继承，那么可能有好几个子类有相同的代码。
   所以这时候策略模式就提现作用了，将变化的行为（算法）抽出一个接口及一组实现类。父类提供set方法，各个子类通过set方法选择想要的行为。
3. 针对接口编程，不针对实现编程。将变化的行为（算法）抽出一个接口及一组实现类。父类提供set方法，各个子类通过set方法选择想要的行为。
策略模式
定义算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。
